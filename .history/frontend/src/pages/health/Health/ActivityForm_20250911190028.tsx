import { useState, useEffect } from "react";
import { useHealthActivity } from "../../../contexts/HealthContext";
import { useNotification } from "../../../components/Notification/NotificationProvider";

interface Props {
  activitiesList: { name: string; met: number }[];
}

function ActivityForm({ activitiesList }: Props) {
  const { health, addActivity } = useHealthActivity();
  const { showNotification } = useNotification();
  
  // Debug: ‡∏î‡∏π health data ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component re-render
  console.log("=== ActivityForm render ===");
  console.log("Health data:", health);
  console.log("Health type:", typeof health);
  console.log("Health is null:", health === null);
  console.log("Health is undefined:", health === undefined);
  console.log("=== End ActivityForm render ===");
  const [type, setType] = useState(activitiesList[0]?.name ?? "");
  const [distance, setDistance] = useState(0);
  const [duration, setDuration] = useState(0);
  const [submitting, setSubmitting] = useState(false);

  const token = localStorage.getItem("token");
  
  // Debug: ‡∏î‡∏π health data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    console.log("=== ActivityForm useEffect - health changed ===");
    console.log("New health data:", health);
    console.log("Health type:", typeof health);
    console.log("=== End useEffect ===");
  }, [health]);

  const handleSubmit = async () => {
    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• health
    console.log("Health data:", health);
    console.log("Health ID:", health?.id);
    console.log("Health object keys:", health ? Object.keys(health) : "No health data");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• health ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    // ‡πÉ‡∏ä‡πâ ID (‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà) ‡πÅ‡∏ó‡∏ô id (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ backend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô ID
    const healthId = (health as any)?.ID || health?.id;
    if (!health || !healthId || !health.weight || !health.height) {
      console.log("Health validation failed:", {
        hasHealth: !!health,
        hasId: !!healthId,
        hasWeight: !!health?.weight,
        hasHeight: !!health?.height,
        healthId: healthId,
        healthKeys: health ? Object.keys(health) : []
      });
      showNotification({
        type: 'warning',
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å, ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á) ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
        duration: 2000
      });
      return;
    }
    
    if (!type || duration <= 0) {
      showNotification({
        type: 'warning',
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        duration: 4000
      });
      return;
    }

    setSubmitting(true);

    // Backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Type, Distance, Duration
    // Backend ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Calories ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ HealthID, UserID ‡πÄ‡∏≠‡∏á
    const activityData = {
      type,
      distance,
      duration,
    };

    console.log("=== Sending Activity Data ===");
    console.log("activityData:", activityData);
    console.log("JSON stringified:", JSON.stringify(activityData, null, 2));
    console.log("=== End Activity Data ===");

    try {
      const res = await fetch("http://localhost:8000/api/activity", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(activityData),
      });

      if (!res.ok) {
        const err = await res.json();
        console.log("=== Activity API Error ===");
        console.log("Response status:", res.status);
        console.log("Response statusText:", res.statusText);
        console.log("Error response:", err);
        console.log("=== End Activity API Error ===");
        showNotification({
          type: 'error',
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ: ${err.error || err.message || "Unknown error"}`,
          duration: 5000
        });
        return;
      }

      const result = await res.json();
      console.log("=== Activity API Success ===");
      console.log("Response:", result);
      console.log("=== End Activity API Success ===");
      
      // Backend ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• activity ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      addActivity(result);
      
      showNotification({
        type: 'success',
        title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        message: `${result.type} ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${result.distance} ‡∏Å‡∏°. ‡πÄ‡∏ß‡∏•‡∏≤: ${result.duration} ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç: ${result.calories?.toFixed(0) || 0} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà`,
        duration: 5000
      });
      setDistance(0);
      setDuration(0);
    } catch (err) {
      console.error(err);
      showNotification({
        type: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        duration: 5000
      });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div style={containerStyle}>
      <div style={headerContainerStyle}>
        <div style={iconStyle}>üèÉ‚Äç‚ôÇÔ∏è</div>
        <h3 style={headerStyle}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
        <p style={subtitleStyle}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
      </div>
      
      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û */}
      <div style={statusContainerStyle}>
        {health ? (
          <div style={statusSuccessStyle}>
            <span style={statusIconStyle}>‚úÖ</span>
            <span>‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</span>
          </div>
        ) : (
          <div style={statusErrorStyle}>
            <span style={statusIconStyle}>‚ùå</span>
            <span>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</span>
          </div>
        )}
      </div>

      <div style={formContainerStyle}>
        <div style={inputGroupStyle}>
          <label style={labelStyle}>üèÉ‚Äç‚ôÇÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</label>
          <select 
            value={type} 
            onChange={(e) => setType(e.target.value)} 
            style={selectStyle}
          >
            {activitiesList.map((a) => (
              <option key={a.name} value={a.name}>
                {a.name}
              </option>
            ))}
          </select>
        </div>

        <div style={inputGroupStyle}>
          <label style={labelStyle}>üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏Å‡∏°.)</label>
          <input
            type="text"
            value={distance === 0 ? "" : distance}
            onChange={(e) => setDistance(Number(e.target.value) || 0)}
            style={inputStyle}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 5"
          />
        </div>

        <div style={inputGroupStyle}>
          <label style={labelStyle}>‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
          <input
            type="text"
            value={duration === 0 ? "" : duration}
            onChange={(e) => setDuration(Number(e.target.value) || 0)}
            style={inputStyle}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 90"
          />
        </div>

        <button 
          onClick={handleSubmit} 
          disabled={submitting || !health} 
          style={{
            ...buttonStyle,
            opacity: (submitting || !health) ? 0.7 : 1,
            cursor: (submitting || !health) ? 'not-allowed' : 'pointer'
          }}
        >
          {submitting ? (
            <span style={buttonContentStyle}>
              <span style={spinnerStyle}>‚è≥</span>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
            </span>
          ) : (
            <span style={buttonContentStyle}>
              <span>üíæ</span>
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            </span>
          )}
        </button>
      </div>
    </div>
  );
}

const containerStyle: React.CSSProperties = {
  background: "linear-gradient(135deg, #ffffff 0%, #fef2f2 100%)",
  padding: "2rem",
  borderRadius: "20px",
  width: "400px",
  display: "flex",
  flexDirection: "column",
  boxShadow: "0 20px 40px rgba(197, 0, 0, 0.15)",
  border: "2px solid #fecaca",
  color: "#1f2937",
  position: "relative",
  overflow: "hidden",
};

const headerContainerStyle: React.CSSProperties = {
  textAlign: "center",
  marginBottom: "1.5rem",
  paddingBottom: "1.5rem",
  borderBottom: "2px solid #fecaca",
};

const iconStyle: React.CSSProperties = {
  fontSize: "3rem",
  marginBottom: "1rem",
  filter: "drop-shadow(0 4px 8px rgba(197, 0, 0, 0.2))",
};

const headerStyle: React.CSSProperties = {
  color: "#c50000",
  fontSize: "1.5rem",
  margin: "0 0 0.5rem 0",
  fontWeight: "700",
  textShadow: "0 2px 4px rgba(197, 0, 0, 0.1)",
};

const subtitleStyle: React.CSSProperties = {
  color: "#6b7280",
  fontSize: "0.9rem",
  margin: 0,
  fontWeight: "500",
};

const statusContainerStyle: React.CSSProperties = {
  marginBottom: "1.5rem",
  textAlign: "center",
};

const statusSuccessStyle: React.CSSProperties = {
  display: "inline-flex",
  alignItems: "center",
  gap: "0.5rem",
  backgroundColor: "#dcfce7",
  color: "#166534",
  padding: "0.75rem 1.5rem",
  borderRadius: "12px",
  fontSize: "0.9rem",
  fontWeight: "600",
  border: "2px solid #bbf7d0",
};

const statusErrorStyle: React.CSSProperties = {
  display: "inline-flex",
  alignItems: "center",
  gap: "0.5rem",
  backgroundColor: "#fef2f2",
  color: "#dc2626",
  padding: "0.75rem 1.5rem",
  borderRadius: "12px",
  fontSize: "0.9rem",
  fontWeight: "600",
  border: "2px solid #fecaca",
};

const statusIconStyle: React.CSSProperties = {
  fontSize: "1rem",
};

const formContainerStyle: React.CSSProperties = {
  display: "flex",
  flexDirection: "column",
  gap: "1.5rem",
};

const inputGroupStyle: React.CSSProperties = {
  display: "flex",
  flexDirection: "column",
  gap: "0.5rem",
};

const labelStyle: React.CSSProperties = {
  color: "#374151",
  fontSize: "0.9rem",
  fontWeight: "600",
  marginBottom: "0.25rem",
};

const inputStyle: React.CSSProperties = {
  padding: "1rem 1.25rem",
  borderRadius: "12px",
  border: "2px solid #fecaca",
  background: "#ffffff",
  fontSize: "1rem",
  fontWeight: "500",
  color: "#1f2937",
  transition: "all 0.3s ease",
  outline: "none",
  boxShadow: "0 2px 4px rgba(197, 0, 0, 0.05)",
};

const selectStyle: React.CSSProperties = {
  padding: "1rem 1.25rem",
  borderRadius: "12px",
  border: "2px solid #fecaca",
  background: "#ffffff",
  fontSize: "1rem",
  fontWeight: "500",
  color: "#1f2937",
  transition: "all 0.3s ease",
  outline: "none",
  boxShadow: "0 2px 4px rgba(197, 0, 0, 0.05)",
  cursor: "pointer",
};

const buttonStyle: React.CSSProperties = {
  padding: "1rem 1.5rem",
  borderRadius: "12px",
  border: "none",
  background: "linear-gradient(135deg, #c50000 0%, #dc2626 100%)",
  color: "#ffffff",
  cursor: "pointer",
  fontWeight: "700",
  fontSize: "1rem",
  width: "100%",
  boxShadow: "0 8px 20px rgba(197, 0, 0, 0.3)",
  transition: "all 0.3s ease",
  marginTop: "1rem",
};

const buttonContentStyle: React.CSSProperties = {
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  gap: "0.5rem",
};

const spinnerStyle: React.CSSProperties = {
  animation: "spin 1s linear infinite",
};

export default ActivityForm;
