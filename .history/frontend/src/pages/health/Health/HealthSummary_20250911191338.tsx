import { useState, useEffect } from "react";
import type { HealthData } from "../../../interface/HealthData";
import type { Activity } from "../../../interface/Activity";
import type { NutritionData } from "../../../interface/Nutrition";

interface Props {
  health: HealthData | null;
  activities: Activity[];
  nutrition: NutritionData | null;
  selectedDate: string;
  allHealthData: HealthData[]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  allActivities: Activity[]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
}

function HealthSummary({ health, activities, nutrition, selectedDate, allHealthData = [], allActivities = [] }: Props) {
  const [weeklyData, setWeeklyData] = useState({
    totalCaloriesBurned: 0,
    totalCaloriesConsumed: 0,
    totalActivityMinutes: 0,
    averageWeight: 0,
    activityCount: 0
  });

  // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const getHealthForDate = () => {
    if (!allHealthData || allHealthData.length === 0) return health;
    
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const healthForDate = allHealthData.find(h => h.date === selectedDate);
    if (healthForDate) return healthForDate;
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const sortedHealth = allHealthData
      .filter(h => h.date && h.date <= selectedDate)
      .sort((a, b) => new Date(b.date!).getTime() - new Date(a.date!).getTime());
    
    return sortedHealth[0] || health;
  };

  // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const getActivitiesForDate = () => {
    if (!allActivities || allActivities.length === 0) return activities;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const selectedDateStr = new Date(selectedDate).toISOString().split('T')[0];
    
    return allActivities.filter(activity => {
      if (!activity.date) return false;
      const activityDateStr = new Date(activity.date).toISOString().split('T')[0];
      return activityDateStr === selectedDateStr;
    });
  };

  useEffect(() => {
    const currentHealth = getHealthForDate();
    const currentActivities = getActivitiesForDate();
    
    // Debug logging
    console.log("=== HealthSummary Debug ===");
    console.log("selectedDate:", selectedDate);
    console.log("allActivities:", allActivities);
    console.log("currentActivities:", currentActivities);
    console.log("nutrition:", nutrition);
    console.log("=== End Debug ===");
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
    const totalCaloriesBurned = currentActivities.reduce((sum, activity) => sum + (activity.calories || 0), 0);
    const totalActivityMinutes = currentActivities.reduce((sum, activity) => sum + (activity.duration || 0), 0);
    const activityCount = currentActivities.length;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£)
    let totalCaloriesConsumed = 0;
    if (nutrition && nutrition.total_calories_per_day) {
      totalCaloriesConsumed = nutrition.total_calories_per_day;
    }

    console.log("=== Setting WeeklyData ===");
    console.log("totalCaloriesBurned:", totalCaloriesBurned);
    console.log("totalCaloriesConsumed:", totalCaloriesConsumed);
    console.log("totalActivityMinutes:", totalActivityMinutes);
    console.log("activityCount:", activityCount);
    console.log("=== End Setting WeeklyData ===");

    setWeeklyData({
      totalCaloriesBurned,
      totalCaloriesConsumed,
      totalActivityMinutes,
      averageWeight: currentHealth?.weight || 0,
      activityCount
    });
  }, [health, activities, nutrition, selectedDate, allHealthData, allActivities]);

  const calculateBMI = () => {
    const currentHealth = getHealthForDate();
    if (!currentHealth || !currentHealth.weight || currentHealth.weight === 0 || !currentHealth.height || currentHealth.height === 0) return 0;
    const heightInMeters = currentHealth.height / 100;
    return (currentHealth.weight / (heightInMeters * heightInMeters)).toFixed(1);
  };

  const getBMICategory = (bmi: number) => {
    if (bmi < 18.5) return { category: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", color: "#3b82f6", bgColor: "#dbeafe" };
    if (bmi < 23) return { category: "‡∏õ‡∏Å‡∏ï‡∏¥", color: "#10b981", bgColor: "#d1fae5" };
    if (bmi < 25) return { category: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô", color: "#f59e0b", bgColor: "#fef3c7" };
    if (bmi < 30) return { category: "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1", color: "#f97316", bgColor: "#fed7aa" };
    return { category: "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2", color: "#ef4444", bgColor: "#fecaca" };
  };

  const bmi = parseFloat(calculateBMI().toString());
  const bmiInfo = getBMICategory(bmi);

  const getCalorieBalance = () => {
    const balance = weeklyData.totalCaloriesConsumed - weeklyData.totalCaloriesBurned;
    
    // Debug logging
    console.log("=== Calorie Balance Debug ===");
    console.log("totalCaloriesConsumed:", weeklyData.totalCaloriesConsumed);
    console.log("totalCaloriesBurned:", weeklyData.totalCaloriesBurned);
    console.log("balance:", balance);
    console.log("=== End Calorie Balance Debug ===");
    
    if (balance > 0) return { status: "‡πÄ‡∏Å‡∏¥‡∏ô", color: "#ef4444", bgColor: "#fecaca" };
    if (balance < 0) return { status: "‡∏Ç‡∏≤‡∏î", color: "#10b981", bgColor: "#d1fae5" };
    return { status: "‡∏™‡∏°‡∏î‡∏∏‡∏•", color: "#3b82f6", bgColor: "#dbeafe" };
  };

  const calorieBalance = getCalorieBalance();
  const balanceAmount = Math.abs(weeklyData.totalCaloriesConsumed - weeklyData.totalCaloriesBurned);

  return (
    <div style={{
      background: "linear-gradient(135deg, #ffffff 0%, #fef2f2 100%)",
      padding: "2rem",
      borderRadius: "20px",
      border: "2px solid #fecaca",
      boxShadow: "0 20px 40px rgba(197, 0, 0, 0.15)",
      minWidth: "600px"
    }}>
      {/* Header */}
      <div style={{
        textAlign: "center",
        marginBottom: "2rem"
      }}>
        <h2 style={{
          color: "#c50000",
          margin: "0 0 0.5rem 0",
          fontSize: "1.75rem",
          fontWeight: "700",
          textShadow: "0 2px 4px rgba(197, 0, 0, 0.1)"
        }}>
          ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
        </h2>
        <p style={{
          color: "#dc2626",
          margin: 0,
          fontSize: "1rem",
          fontWeight: "500"
        }}>
          {new Date(selectedDate).toLocaleDateString('th-TH', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </p>
        {(() => {
          const currentHealth = getHealthForDate();
          const hasDataForDate = currentHealth && currentHealth.date === selectedDate;
          
          if (hasDataForDate) {
            return (
              <p style={{
                color: "#10b981",
                margin: "0.5rem 0 0 0",
                fontSize: "0.85rem",
                fontWeight: "500"
              }}>
                üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ
              </p>
            );
          } else {
            const latestDate = currentHealth?.date;
            return (
              <p style={{
                color: "#f59e0b",
                margin: "0.5rem 0 0 0",
                fontSize: "0.85rem",
                fontWeight: "500"
              }}>
                üìÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {latestDate ? new Date(latestDate).toLocaleDateString('th-TH', {
                  day: 'numeric',
                  month: 'short',
                  year: 'numeric'
                }) : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
              </p>
            );
          }
        })()}
      </div>

      {/* Main Stats Grid */}
      <div style={{
        display: "grid",
        gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
        gap: "1.5rem",
        marginBottom: "2rem"
      }}>
        {/* BMI Card */}
        <div style={{
          backgroundColor: "rgba(255,255,255,0.9)",
          padding: "1.5rem",
          borderRadius: "15px",
          textAlign: "center",
          boxShadow: "0 8px 20px rgba(0,0,0,0.08)",
          border: `2px solid ${bmiInfo.color}20`
        }}>
          <div style={{
            fontSize: "2.5rem",
            marginBottom: "0.5rem"
          }}>
            üìä
          </div>
          <div style={{
            fontSize: "2rem",
            fontWeight: "700",
            color: bmiInfo.color,
            marginBottom: "0.25rem"
          }}>
            {bmi}
          </div>
          <div style={{
            color: "#64748b",
            fontSize: "0.9rem",
            fontWeight: "500",
            marginBottom: "0.5rem"
          }}>
            BMI
          </div>
          <div style={{
            backgroundColor: bmiInfo.bgColor,
            color: bmiInfo.color,
            padding: "0.5rem 1rem",
            borderRadius: "20px",
            fontSize: "0.8rem",
            fontWeight: "600"
          }}>
            {bmiInfo.category}
          </div>
        </div>

        {/* Weight Card */}
        <div style={{
          backgroundColor: "rgba(255,255,255,0.9)",
          padding: "1.5rem",
          borderRadius: "15px",
          textAlign: "center",
          boxShadow: "0 8px 20px rgba(0,0,0,0.08)"
        }}>
          <div style={{
            fontSize: "2.5rem",
            marginBottom: "0.5rem"
          }}>
            ‚öñÔ∏è
          </div>
          <div style={{
            fontSize: "2rem",
            fontWeight: "700",
            color: "#c50000",
            marginBottom: "0.25rem"
          }}>
            {weeklyData.averageWeight}
          </div>
          <div style={{
            color: "#64748b",
            fontSize: "0.9rem",
            fontWeight: "500"
          }}>
            ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)
          </div>
        </div>

        {/* Calorie Balance Card */}
        <div style={{
          backgroundColor: "rgba(255,255,255,0.9)",
          padding: "1.5rem",
          borderRadius: "15px",
          textAlign: "center",
          boxShadow: "0 8px 20px rgba(0,0,0,0.08)",
          border: `2px solid ${calorieBalance.color}20`
        }}>
          <div style={{
            fontSize: "2.5rem",
            marginBottom: "0.5rem"
          }}>
            ‚öñÔ∏è
          </div>
          <div style={{
            fontSize: "1.5rem",
            fontWeight: "700",
            color: calorieBalance.color,
            marginBottom: "0.25rem"
          }}>
            {balanceAmount.toFixed(0)}
          </div>
          <div style={{
            color: "#64748b",
            fontSize: "0.9rem",
            fontWeight: "500",
            marginBottom: "0.5rem"
          }}>
            ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà {calorieBalance.status}
          </div>
          <div style={{
            backgroundColor: calorieBalance.bgColor,
            color: calorieBalance.color,
            padding: "0.5rem 1rem",
            borderRadius: "20px",
            fontSize: "0.8rem",
            fontWeight: "600"
          }}>
            {calorieBalance.status}
          </div>
        </div>
      </div>

      {/* Activity & Nutrition Summary */}
      <div style={{
        display: "grid",
        gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
        gap: "1.5rem",
        marginBottom: "2rem"
      }}>
        {/* Activity Summary */}
        <div style={{
          backgroundColor: "rgba(255,255,255,0.9)",
          padding: "1.5rem",
          borderRadius: "15px",
          boxShadow: "0 8px 20px rgba(0,0,0,0.08)"
        }}>
          <h3 style={{
            color: "#c50000",
            margin: "0 0 1rem 0",
            fontSize: "1.1rem",
            fontWeight: "600",
            display: "flex",
            alignItems: "center",
            gap: "0.5rem"
          }}>
            üèÉ‚Äç‚ôÇÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
          </h3>
          
          <div style={{
            display: "flex",
            flexDirection: "column",
            gap: "0.75rem"
          }}>
            <div style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center"
            }}>
              <span style={{ color: "#64748b", fontSize: "0.9rem" }}>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
              <span style={{ color: "#c50000", fontWeight: "600" }}>{weeklyData.activityCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
            </div>
            
            <div style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center"
            }}>
              <span style={{ color: "#64748b", fontSize: "0.9rem" }}>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°</span>
              <span style={{ color: "#c50000", fontWeight: "600" }}>{weeklyData.totalActivityMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
            </div>
            
            <div style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center"
            }}>
              <span style={{ color: "#64748b", fontSize: "0.9rem" }}>‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç</span>
              <span style={{ color: "#ef4444", fontWeight: "600" }}>{weeklyData.totalCaloriesBurned.toFixed(0)} kcal</span>
            </div>
          </div>
        </div>

        {/* Nutrition Summary */}
        <div style={{
          backgroundColor: "rgba(255,255,255,0.9)",
          padding: "1.5rem",
          borderRadius: "15px",
          boxShadow: "0 8px 20px rgba(0,0,0,0.08)"
        }}>
          <h3 style={{
            color: "#c50000",
            margin: "0 0 1rem 0",
            fontSize: "1.1rem",
            fontWeight: "600",
            display: "flex",
            alignItems: "center",
            gap: "0.5rem"
          }}>
            üçé ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
          </h3>
          
          <div style={{
            display: "flex",
            flexDirection: "column",
            gap: "0.75rem"
          }}>
            {weeklyData.totalCaloriesConsumed > 0 && (
              <div style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center"
              }}>
                <span style={{ color: "#64748b", fontSize: "0.9rem" }}>‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ</span>
                <span style={{ color: "#3b82f6", fontWeight: "600" }}>{weeklyData.totalCaloriesConsumed.toFixed(0)} kcal</span>
              </div>
            )}
            
            <div style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center"
            }}>
              <span style={{ color: "#64748b", fontSize: "0.9rem" }}>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</span>
              <span style={{ color: "#64748b", fontWeight: "600" }}>
                {nutrition?.total_calories_per_day ? `${nutrition.total_calories_per_day.toFixed(0)} kcal` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
              </span>
            </div>
            
            <div style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center"
            }}>
              <span style={{ color: "#64748b", fontSize: "0.9rem" }}>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</span>
              <span style={{ color: "#8b5cf6", fontWeight: "600" }}>
                {nutrition?.goal || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Health Tips */}
      <div style={{
        backgroundColor: "rgba(255,255,255,0.9)",
        padding: "1.5rem",
        borderRadius: "15px",
        boxShadow: "0 8px 20px rgba(0,0,0,0.08)"
      }}>
          <h3 style={{
            color: "#c50000",
            margin: "0 0 1rem 0",
            fontSize: "1.1rem",
            fontWeight: "600",
            display: "flex",
            alignItems: "center",
            gap: "0.5rem"
          }}>
            üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
          </h3>
        
        <div style={{
          display: "flex",
          flexDirection: "column",
          gap: "0.75rem"
        }}>
          {bmi < 18.5 && (
            <div style={{
              color: "#3b82f6",
              fontSize: "0.9rem",
              lineHeight: "1.4"
            }}>
              üí™ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
            </div>
          )}
          
          {bmi >= 18.5 && bmi < 23 && (
            <div style={{
              color: "#10b981",
              fontSize: "0.9rem",
              lineHeight: "1.4"
            }}>
              ‚úÖ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
            </div>
          )}
          
          {bmi >= 23 && (
            <div style={{
              color: "#f59e0b",
              fontSize: "0.9rem",
              lineHeight: "1.4"
            }}>
              ‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            </div>
          )}
          
          {weeklyData.totalActivityMinutes < 30 && (
            <div style={{
              color: "#ef4444",
              fontSize: "0.9rem",
              lineHeight: "1.4"
            }}>
              üèÉ‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
            </div>
          )}
          
          {calorieBalance.status === "‡πÄ‡∏Å‡∏¥‡∏ô" && (
            <div style={{
              color: "#ef4444",
              fontSize: "0.9rem",
              lineHeight: "1.4"
            }}>
              üçé ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            </div>
          )}
          
          {calorieBalance.status === "‡∏Ç‡∏≤‡∏î" && (
            <div style={{
              color: "#10b981",
              fontSize: "0.9rem",
              lineHeight: "1.4"
            }}>
              üéØ ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default HealthSummary;
